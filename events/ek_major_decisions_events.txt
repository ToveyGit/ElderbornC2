namespace = ek_major_decisions

# ek_major_decisions.0001 - 0010: Reform the [CULTURE] Military

# Reform the [CULTURE] Military
ek_major_decisions.0001 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0001.t
	desc = ek_major_decisions.0001.desc
	theme = martial
	
	left_portrait = {
		character = root
		animation = war_over_win
	}
	
	immediate = {
		culture = { remove_innovation = innovation_disorganized_military }
		root = { save_scope_as = reformer }
	}

	option = {
		name = ek_major_decisions.0001.a
		
		give_nickname = nick_the_warchief
		add_prestige = medium_prestige_gain
	}

	option = {
		name = ek_major_decisions.0001.b
		
		add_prestige = major_prestige_gain
	}

	after = { 
		every_player = { 
			trigger_event = {
				id = ek_major_decisions.0002
				days = 1						
			}
		}
	}
}

ek_major_decisions.0002 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0002.t
	desc = {
		desc = ek_major_decisions.0002.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					culture = scope:reformer.culture
				}
				desc = ek_major_decisions.0002.desc.same_kin
			}
			desc = ek_major_decisions.0002.desc.other_kin
		}
	}
	theme = martial
	
	left_portrait = {
		character = scope:reformer
		animation = war_over_win
	}
	
	trigger = {
		NOT = { this = scope:reformer }
		# EK TODO: make this work
#		trigger_if = { 
#			limit = { scope:reformed_culture = this:goblin }
#			capital_province = {
#				geographical_region = {
#					NOR = {
#						geographical_region = mundus_tamriel_skyrim
#						geographical_region = mundus_tamriel_high_rock
#						geographical_region = mundus_tamriel_black_marsh
#						geographical_region = mundus_tamriel_valenwood
#					}
#				}
#			}
#		}
#		trigger_if = { 
#			limit = { scope:reformed_culture = this:riekling }
#			capital_province = {
#				geographical_region = {
#					OR = {
#						geographical_region = mundus_tamriel_skyrim_solstheim
#						geographical_region = mundus_tamriel_skyrim_eastmarch # Kingdom of Eastmarch
#						geographical_region = mundus_tamriel_skyrim_east_ghost # Kingdoms of Winterhold and the Pale
#					}
#				}
#			}
#		}
#		trigger_if = { 
#			limit = { scope:reformed_culture = this:riekr }
#			capital_province = {
#				geographical_region = {
#					geographical_region = mundus_tamriel_high_rock_greater_wrothgar 
#				}			
#			}
#		}
#		trigger_if = { 
#			limit = { scope:reformed_culture = this:imga }
#			capital_province = {
#				geographical_region = {
#					geographical_region = mundus_tamriel_valenwood
#				}			
#			}
#		}
	}

	option = {
		name = ek_major_decisions.0002.a

		trigger = {
			NOT = { culture = scope:reformer.culture }
		}
	}

	option = {
		name = ek_major_decisions.0002.b

		trigger = {
			culture = scope:reformer.culture
		}
	}
}

ek_major_decisions.0010 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0010.t
	desc = ek_major_decisions.0010.desc
	theme = martial
	
	left_portrait = {
		character = root
	}
	
	immediate = {
		if = {
			limit = { completely_controls = title:d_caer_suvio }
			title:d_caer_suvio = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_mir_corrup }
			title:d_mir_corrup = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_artemon }
			title:d_artemon = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_grief }
			title:d_grief = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_sundercliff }
			title:d_sundercliff = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_facian }
			title:d_facian = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_cuptor }
			title:d_cuptor = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_redwater }
			title:d_redwater = { set_de_jure_liege_title = title:k_nibenay }
		}
		if = {
			limit = { completely_controls = title:d_entius }
			title:d_entius = { set_de_jure_liege_title = title:k_nibenay }
		}
	}

	option = {
		name = ek_major_decisions.0010.caer_suvio
		
		trigger = { has_title = title:d_caer_suvio }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_caer_suvio }
		title:k_nibenay = { set_capital_county = title:d_caer_suvio.title_capital_county }
	}

	option = {
		name = ek_major_decisions.0010.mir_corrup
		
		trigger = { has_title = title:d_mir_corrup }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_mir_corrup }
		title:k_nibenay = { set_capital_county = title:d_mir_corrup.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.artemon
		
		trigger = { has_title = title:d_artemon }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_artemon }
		title:k_nibenay = { set_capital_county = title:d_artemon.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.grief
		
		trigger = { has_title = title:d_grief }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_grief }
		title:k_nibenay = { set_capital_county = title:d_grief.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.sundercliff
		
		trigger = { has_title = title:d_sundercliff }
		
		get_title = title:k_nibenay
		if = {
			limit = { 
				OR = {
					culture = culture:nibenese
					culture = culture:blackwood
				}
			}
			title:k_nibenay = { set_title_name = k_canulus }
		}
		else = { title:k_nibenay = { set_title_name = k_sundercliff } }
		title:k_nibenay = { set_capital_county = title:d_sundercliff.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.facian
		
		trigger = { has_title = title:d_facian }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_facian }
		title:k_nibenay = { set_capital_county = title:d_facian.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.cuptor
		
		trigger = { has_title = title:d_cuptor }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_cuptor }
		title:k_nibenay = { set_capital_county = title:d_cuptor.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.redwater
		
		trigger = { has_title = title:d_redwater }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_redwater }
		title:k_nibenay = { set_capital_county = title:d_redwater.title_capital_county }
	}
	
	option = {
		name = ek_major_decisions.0010.entius
		
		trigger = { has_title = title:d_entius }
		
		get_title = title:k_nibenay
		title:k_nibenay = { set_title_name = k_entius }
		title:k_nibenay = { set_capital_county = title:d_entius.title_capital_county }
	}
}

# ek_major_decisions.0021 - 0030: Reestablish (or destroy) Orsinium

#Creates Orsinium
ek_major_decisions.0020 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0020.t
	desc = ek_major_decisions.0020.desc
	theme = martial
	
	left_portrait = {
		character = root
	}
	
	immediate = {
		title:k_orsinium.holder = { save_scope_as = new_orsinium_king }
	}

	option = {
		name = ek_major_decisions.0020.option
		
		if = {
			#If you turned a whole Kingdom into Orsinium
			limit = { title:k_orsinium = { has_variable = orsinium_kingdom_complete_boolean } }
			
			#Destroys the original (non-Orsinium) kingdom
			destroy_title = scope:original_kingdom
			
			#Makes the original kingdom's duchies a de jure part of Orsinium
			every_duchy = {
				limit = { de_jure_liege = scope:original_kingdom }
				set_de_jure_liege_title = title:k_orsinium
			}
			
			#If the original kingdom's empire had a holder, give him a claim
			if = {
				limit = { exists = scope:original_empire.holder }
				scope:original_empire.holder = { add_pressed_claim = title:k_orsinium }
			}
			
			#Gives Orsinium a new capital
			title:k_orsinium = { set_capital_county = scope:original_kingdom.title_capital_county }
		}
		
		if = {
			#If you turned a single Duchy into Orsinium
			limit = { NOT = { title:k_orsinium = { has_variable = orsinium_kingdom_complete_boolean } } }
			
			#Makes it de jure part of Orsinium
			scope:original_duchy = { set_de_jure_liege_title = title:k_orsinium }
			
			#If the duchy's kingdom had a holder, give him a claim
			if = {
				limit = { exists = scope:original_kingdom.holder }
				scope:original_kingdom.holder = { add_pressed_claim = scope:original_duchy }
			}
			
			#Gives Orsinium a new capital
			title:k_orsinium = { set_capital_county = scope:original_duchy.title_capital_county }
		}
	}
	
	after = {
		#Mark Orsinium's original kingdom and empire
		scope:original_kingdom = {
			set_variable = {
				name = orsinium_original_kingdom_boolean
				value = 1
			}
		}
		scope:original_empire = {
			set_variable = {
				name = orsinium_original_empire_boolean
				value = 1
			}
		}
		
		#Let other rulers know about it (only matters for players)
		every_ruler = { 
			limit = { 
				NOT = { has_title = title:k_orsinium }
				is_ai = no
			}
			trigger_event = { id = ek_major_decisions.0021 days = 1 }
		}
		
		### Modifiers to defend the new Orsinium
		update_orsinium_mountain_orc_advantage = yes
	}
}

#Notifies people that Orsinium has been created
ek_major_decisions.0021 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0021.t
	desc = ek_major_decisions.0021.desc
	theme = martial
	
	left_portrait = {
		character = title:k_orsinium.holder
	}
	
	immediate = {
		title:k_orsinium.holder = { save_scope_as = new_orsinium_king }
	}

	option = {
		name = ek_major_decisions.0021.option.a
		
		trigger = { 
			OR = {
				root = scope:orsinium_original_liege.holder
				root = scope:orsinium_original_liege.de_jure_liege.holder
				root = scope:orsinium_original_liege_kingdom.holder
				root = scope:orsinium_original_liege_kingdom.de_jure_liege.holder
			}
		}
	}
	
	option = {
		name = ek_major_decisions.0021.option.b
		
		trigger = { 
			NOR = { 
				root = scope:orsinium_original_liege.holder
				root = scope:orsinium_original_liege.de_jure_liege.holder
				root = scope:orsinium_original_liege_kingdom.holder
				root = scope:orsinium_original_liege_kingdom.de_jure_liege.holder
				culture = { has_cultural_pillar = heritage_orsimeri }
			} 
		}
	}
	
	option = {
		name = ek_major_decisions.0021.option.c
		
		trigger = { 
			NOT = { 
				root = scope:orsinium_original_liege.holder
				root = scope:orsinium_original_liege.de_jure_liege.holder
				root = scope:orsinium_original_liege_kingdom.holder
				root = scope:orsinium_original_liege_kingdom.de_jure_liege.holder
			}
			culture = { has_cultural_pillar = heritage_orsimeri }
		}
	}
}

#Orsinium expands
ek_major_decisions.0022 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0022.t
	desc = ek_major_decisions.0022.desc
	theme = martial
	
	left_portrait = {
		character = root
	}
	
	immediate = {
		title:k_orsinium.holder = { save_scope_as = new_orsinium_king }
	}

	option = {
		name = ek_major_decisions.0022.option
		
		if = {
			#If you turned a whole Kingdom into Orsinium
			limit = { title:k_orsinium = { has_variable = orsinium_kingdom_complete_boolean } }
			
			#Destroys the original (non-Orsinium) kingdom
			destroy_title = scope:original_kingdom
			
			#Makes the original kingdom's duchies a de jure part of Orsinium
			every_duchy = {
				limit = { de_jure_liege = scope:original_kingdom }
				set_de_jure_liege_title = title:k_orsinium
			}
			
			#If the original kingdom's empire had a holder, give him a claim
			if = {
				limit = { exists = scope:original_empire.holder }
				scope:original_empire.holder = { add_pressed_claim = title:k_orsinium }
			}
		}
	}
	
	after = {
		#Let other rulers know about it (only matters for players)
		every_ruler = { 
			limit = { 
				NOT = { has_title = title:k_orsinium }
				is_ai = no
			}
			trigger_event = { id = ek_major_decisions.0023 days = 1 }
		}	
		
		### Modifiers to defend the new Orsinium
		update_orsinium_mountain_orc_advantage = yes
	}
}

#Notifies people that Orsinium has expanded
ek_major_decisions.0023 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0023.t
	desc = ek_major_decisions.0023.desc
	theme = martial
	
	left_portrait = {
		character = title:k_orsinium.holder
	}
	
	immediate = {
		title:k_orsinium.holder = { save_scope_as = new_orsinium_king }
	}
	
	option = {
		name = ek_major_decisions.0023.option.a
		
		trigger = { 
			NOT = { culture = { has_cultural_pillar = heritage_orsimeri } } 
		}
	}
	
	option = {
		name = ek_major_decisions.0023.option.b
		
		trigger = { 
			culture = { has_cultural_pillar = heritage_orsimeri }
		}
	}
}

#Notifies people that Orsinium has been reintegrated into its former kingdom
ek_major_decisions.0024 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0024.t
	desc = ek_major_decisions.0024.desc
	theme = martial
	
	left_portrait = {
		character = scope:orsinium_conqueror
		animation = war_over_win
	}
	
	right_portrait = {
		character = scope:orsinium_old_king
	}
	
	immediate = {
		culture:mountain_orc = { save_scope_as = mountain_orc } #for loc
	}
	
	option = {
		name = ek_major_decisions.0024.option.a
		trigger = { 
			NOT = { culture = { has_cultural_pillar = heritage_orsimeri } } 
		}
		flavor = ek_major_decisions.0024.tooltip

	}
	
	option = {
		name = ek_major_decisions.0024.option.b
		trigger = { 
			culture = { has_cultural_pillar = heritage_orsimeri }
		}
		flavor = ek_major_decisions.0024.tooltip
	}
}

# Cast off Pariah Status
ek_major_decisions.0030 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0030.t
	desc = ek_major_decisions.0030.desc
	theme = martial
	
	left_portrait = {
		character = root
		animation = war_over_win
	}
	
	immediate = {
		culture = { remove_innovation = innovation_pariah_folk }
		root = { save_scope_as = pariah_reformer }
	}

	option = {
		name = ek_major_decisions.0030.a
		
		give_nickname = nick_last_pariah
		dynasty = { add_dynasty_prestige = major_dynasty_prestige_value }
		custom_tooltip = {
			text = ek_major_decisions.0030.a.tt
			culture = { add_innovation = innovation_pariah_legacy }
		}	
		ai_chance = { #We're gonna want Orcs and Goblinken to usually take this option
			base = 50
			modifier = {
				add = 30
				culture = {
					OR = {
						has_cultural_pillar = heritage_orsimeri
						has_cultural_pillar = heritage_goblinken
						has_cultural_pillar = heritage_minotaur
					}
				}
			}	
		}		
	}

	option = {
		name = ek_major_decisions.0030.b
		
		give_nickname = nick_the_redeemer
		dynasty = { add_dynasty_prestige = major_dynasty_prestige_value }
		custom_tooltip = {
			text = ek_major_decisions.0030.b.tt
			culture = { add_innovation = innovation_redeemed_pariahs }
		}	
		ai_chance = { #The Betrayed, Volkihar, and Gray Islanders however have less reason to sympathise with Orcs and Goblinken
			base = 50
			modifier = {
				add = 30
				culture = {
					OR = {
						has_cultural_pillar = heritage_falmeri
						has_cultural_pillar = heritage_atmoran
						has_cultural_pillar = heritage_breton
					}
				}
				#culture = { has_cultural_pillar = heritage_falmeri }
			}	
		}
	}
}

#Notifies people that a culture has lost its pariah status
ek_major_decisions.0031 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0031.t
	desc = ek_major_decisions.0031.desc
	theme = martial
	
	left_portrait = {
		character = scope:pariah_reformer
	}

	
	option = { #hey, we're also [culture]! poggers
		name = ek_major_decisions.0031.option.a
		flavor = ek_major_decisions.0031.tooltip
		trigger = { culture = scope:pariah_reformer.culture }
	}
	
	option = { #hey, we're also pariahs, maybe we too can lose that status?
		name = ek_major_decisions.0031.option.b
		flavor = ek_major_decisions.0031.tooltip
		trigger = { 
			AND = {
				is_pariah_character = yes
				NOT = { culture = scope:pariah_reformer.culture }
			}
		}		
	}

	option = { #for outsiders: the nice option :)
		name = ek_major_decisions.0031.option.c
		flavor = ek_major_decisions.0031.tooltip
		trigger = { 
			AND = {
				is_pariah_character = no
				NOT = { culture = scope:pariah_reformer.culture }
			}
		}		
		if = { #let's limit it to the culture head to not risk the numbers going bonkers
			limit = { culture.culture_head = root } 
			root.culture = {
				change_cultural_acceptance = {
					target = scope:pariah_reformer.culture
					value = low_positive_culture_acceptance
					desc = ek_major_decisions.0031_cultural_acceptance_gain
				}
			}	
		}	
	}

	option = { #for outsiders: the meanie option >:(
		name = ek_major_decisions.0031.option.d
		flavor = ek_major_decisions.0031.tooltip
		trigger = { 
			AND = {
				is_pariah_character = no
				NOT = { culture = scope:pariah_reformer.culture }
			}
		}
		if = { #let's limit it to the culture head to not risk the numbers going bonkers
			limit = { culture.culture_head = root } 
			root.culture = {
				change_cultural_acceptance = {
					target = scope:pariah_reformer.culture
					value = low_negative_culture_acceptance
					desc = ek_major_decisions.0031_cultural_acceptance_loss
				}
			}	
		}	
	}
}

# Hidden event to check for whether a culture should be returned to pariah status
ek_major_decisions.0032 = {
	scope = none
	hidden = yes

	immediate = {
		if = { #let's see if there are any applicable cultures that have any king tier rulers
			limit = {
				NOT = {
					any_ruler = {
						AND = {
							is_landed = yes	
							highest_held_title_tier >= tier_kingdom
							is_former_pariah_character = yes
						}
					}
				}	
			}
			# okay so the limit is only true if there aren't any king >= tier rulers with those innovations
			# that must mean the original backing used to wrest respect from the world isn't present any longer
			# this means there's nothing stopping the world from restoring its original perception of them as monsters
			# in the fringe case that there's more than one former pariah culture that risks reverting, just pick one of them at random
			random_culture_global = {
				limit = {
					OR = {
						has_innovation = innovation_pariah_legacy
						has_innovation = innovation_redeemed_pariahs
					}	
				}
				save_scope_as = demoted_pariah_culture
			}
			scope:demoted_pariah_culture = { 
				# remove the other pariah innovations
				remove_innovation = innovation_pariah_legacy
				remove_innovation = innovation_redeemed_pariahs
				# then add back Pariah Folk
				add_innovation = innovation_pariah_folk
			}	
			# then trigger the event making the world aware of this
			every_player = {
				trigger_event = ek_major_decisions.0033
			}
		}	
		else = { #if the previous check doesn't return true, retrigger this event to check again in 15 years
			trigger_event = { id = ek_major_decisions.0032 years = 15 }
		}
	}
}	

#Notifies people that a culture has regained its pariah status
ek_major_decisions.0033 = {
	type = character_event
	content_source = dlc_ek
	title = ek_major_decisions.0033.t
	desc = ek_major_decisions.0033.desc
	theme = martial
	
	left_portrait = {
		character = scope:demoted_pariah_culture.culture_head
		animation = sadness
	}

	
	option = { #hey, we're also [culture]! not poggers
		name = ek_major_decisions.0033.option.a
		flavor = ek_major_decisions.0033.tooltip
		trigger = { culture = scope:demoted_pariah_culture }
	}
	
	option = { #hey, we're also pariahs, is there no hope for us after all then?
		name = ek_major_decisions.0033.option.b
		flavor = ek_major_decisions.0033.tooltip
		trigger = {
			AND = {
				is_pariah_character = yes
				NOT = { culture = scope:demoted_pariah_culture }
			}	
		}
	}

	option = { #for outsiders: the nice option :)
		name = ek_major_decisions.0033.option.c
		flavor = ek_major_decisions.0033.tooltip
		trigger = { 
			AND = {
				is_pariah_character = no
				NOT = { culture = scope:demoted_pariah_culture }
			}
		}		
		if = { #let's limit it to the culture head to not risk the numbers going bonkers
			limit = { culture.culture_head = root } 
			root.culture = {
				change_cultural_acceptance = {
					target = scope:demoted_pariah_culture
					value = low_positive_culture_acceptance
					desc = ek_major_decisions.0031_cultural_acceptance_gain
				}
			}	
		}	
	}

	option = { #for outsiders: the meanie option >:(
		name = ek_major_decisions.0033.option.d
		flavor = ek_major_decisions.0033.tooltip
		trigger = { 
			AND = {
				is_pariah_character = no
				NOT = { culture = scope:demoted_pariah_culture }
			}
		}
		if = { #let's limit it to the culture head to not risk the numbers going bonkers
			limit = { culture.culture_head = root } 
			root.culture = {
				change_cultural_acceptance = {
					target = scope:demoted_pariah_culture
					value = low_negative_culture_acceptance
					desc = ek_major_decisions.0031_cultural_acceptance_loss
				}
			}	
		}	
	}
}